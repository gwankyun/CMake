.. cmake-manual-description: CMake C++ Modules Support Reference

cmake-cxxmodules(7)
*******************

.. versionadded:: 3.28

C++ 20引入了“模块”的概念。该设计要求构建系统之间对编译进行排序，以可靠地满足\ ``import``\
语句。CMake的实现要求编译器在构建过程中扫描源文件中的模块依赖，整理扫描结果来推断排序约束，\
并告诉构建工具如何动态更新构建图。

编译策略
====================

有了C++模块，编译一组C++源代码不再是令人尴尬的并行。也就是说，为了提供“CMI”（已编译模块接口）\
或“BMI”（二进制模块接口），任何给定的源文件都可能首先要求编译另一个源文件，C++编译器使用这些\
文件来满足其他源文件中的\ ``import``\ 语句。有了头文件，源代码可以共享它们的声明，以便任何\
使用者都可以独立编译。对于模块，编译器现在根据源文件的内容及其\ ``export``\ 语句生成声明到\
这些BMI文件中。

编译所需的顺序需要在构建时解析该顺序，因为该顺序由源代码的内容控制。这意味着在构建过程中从源\
代码中提取排序需求，以避免通过配置和生成阶段为每个源更改重新生成构建图，以获得正确的构建。

一般的策略是使用“扫描器”来提取顺序依赖信息，并通过获取每个源的扫描结果（由\ `P1689R5`_\
文件表示）和“整理”目标内的依赖关系以及目标可见的目标产生的模块，在现有的边之间使用新边更新\
构建图。主要任务是生成传递给每个编译规则的“模块映射”文件，其中包含满足\ ``import``\ 语句所\
需的BMI的路径。collator还具有使用构建时信息来填写信息的任务，包括模块接口单元的\ ``install``\
规则、它们的BMI，以及C++模块的任何导出目标属性。

.. _`P1689R5`: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1689r5.html

.. note::

   CMake在关注性能改进之前，先关注正确的构建。在选择的策略中有一些已知的策略可以提供构建性能\
   的改进。然而，它们被推迟了，直到我们有一个可以比较它们的工作模型。同样需要注意的是，在一种\
   情况下有用的策略（例如，干净构建）可能在另一种情况下不有效（例如，增量构建）。找到平衡并\
   提供控制来选择策略是未来的工作。

扫描控制
================

是否扫描源代码以查找C++模块的使用情况取决于以下查询。使用第一个提供yes/no答案的查询。

- 如果源文件属于\ ``CXX_MODULES``\ 类型的文件集，则会对其进行扫描。
- 如果目标不使用至少C++ 20，则不会对其进行扫描。
- 如果源文件不是\ ``CXX``\ 语言，它将不会被扫描。
- 如果设置了\ :prop_sf:`CXX_SCAN_FOR_MODULES`\ 源文件属性，则将使用其值。
- 如果设置了\ :variable:`CMAKE_CXX_SCAN_FOR_MODULES`\ 目标属性，则将使用其值。设置\
  :variable:`CMAKE_CXX_SCAN_FOR_MODULES`\ 变量，以便在创建所有目标时初始化该属性。
- 否则，将在编译器和生成器支持的前提下，扫描源文件。参见策略\ :policy:`CMP0155`。

请注意，任何扫描的源代码都将被排除在任何统一构建中（参见\ :prop_tgt:`UNITY_BUILD`），\
因为与模块相关的语句只能发生在C++翻译单元中的一个地方。

编译器支持
================

CMake原生支持模块依赖扫描的编译器包括：

* MSVC工具集14.34及更新版本（与Visual Studio 17.4及更新版本一起提供）
* LLVM/Clang 16.0及更新版本
* GCC 14（对于开发分支，2023-09-20之后）及更新版本

``import std``\ 支持
======================

对\ ``import std``\ 的支持仅限于以下工具链和标准库组合：

* Clang 18.1.2及更新版本的\ ``-stdlib=libc++``
* MSVC工具集14.36及更新版本（与Visual Studio 17.6预览版2及更新版本一起提供）

:variable:`CMAKE_CXX_COMPILER_IMPORT_STD`\ 变量可用于检测当前C++工具链对标准级别的支持\
情况。

.. note ::

   只有在实验性支持\ ``import std;``\ 并已开启\ ``CMAKE_EXPERIMENTAL_CXX_IMPORT_STD``\
   开关时才提供这种支持。

生成器支持
=================

支持扫描C++模块源的生成器列表包括：

- :generator:`Ninja`
- :generator:`Ninja Multi-Config`
- :generator:`Visual Studio 17 2022`

限制
-----------

在CMake中，当前的C++模块支持有许多已知的限制。这没有记录已知的限制或编译器中的这些bug会随着\
时间的推移而改变。

对于所有生成器：

- 不支持标头单元。
- 没有对\ ``import std;``\ 的内置支持，或者是其他编译器提供的模块。

对于Ninja生成器：

- 需要\ ``ninja`` 1.11或更新版本。

对于\ :ref:`Visual Studio Generators`：

- 仅支持Visual Studio 2022和MSVC工具集14.34（Visual Studio 17.4）及更新版本。
- 不支持导出或安装BMI或模块信息。
- 不支持用C++模块从\ ``IMPORTED``\ 的目标编译BMI（包括\ ``import std``）。
- 没有从\ ``PUBLIC``\ 模块源中使用\ ``PRIVATE``\ 源提供的模块诊断。
