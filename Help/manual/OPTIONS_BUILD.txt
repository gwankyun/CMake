.. option:: -S <path-to-source>

 要构建的CMake项目的根目录路径。

.. option:: -B <path-to-build>

 CMake将用作构建目录根目录的路径。

 如果该目录不存在，CMake会创建该它。

.. option:: -C <initial-cache>

 预加载一个脚本来填充缓存。

 当CMake第一次在一个空的构建树中运行时，它会创建一个\ ``CMakeCache.txt``\ 文件，并用项目\
 的可定制设置填充它。此选项可用于指定一个文件，在第一次处理项目的CMake列表文件之前从该文件加\
 载缓存项。加载的条目优先于项目的默认值。给定的文件应该是包含使用\ ``CACHE``\ 选项的\
 :command:`set`\ 命令的CMake脚本，而不是缓存格式的文件。

 脚本中对\ :variable:`CMAKE_SOURCE_DIR`\ 和\ :variable:`CMAKE_BINARY_DIR`\ 的引用\
 将计算到顶层源码和构建树。

.. option:: -D <var>:<type>=<value>, -D <var>=<value>

 创建或更新CMake ``CACHE``\ 项。

 当CMake第一次在一个空的构建树中运行时，它会创建一个\ ``CMakeCache.txt``\ 文件，并用项目\
 的可定制设置填充它。此选项可用于指定优先于项目默认值的设置。根据需要，可以对任意多的\
 ``CACHE``\ 条目重复该选项。

 如果给定\ ``:<type>``\ 部分，则它必须是\ :command:`set`\ 命令文档为其\ ``CACHE``\
 签名指定的类型之一。如果省略\ ``:<type>``\ 部分且条目未指定类型，则创建的条目没有类型。如\
 果项目中的命令将类型设置为\ ``PATH``\ 或\ ``FILEPATH``，那么\ ``<value>``\ 将被转换为\
 绝对路径。

 该选项也可以作为单个参数使用：\ ``-D<var>:<type>=<value>``\ 或\ ``-D<var>=<value>``。

 重要的是要注意\ ``-C``\ 和\ ``-D``\ 参数的顺序很重要。它们将按照列出的顺序执行，最后一个\
 参数优先于前面的参数。例如，如果指定\ ``-DCMAKE_BUILD_TYPE=Debug``，后跟\ ``-C``\ 参数，\
 文件调用：

 .. code-block:: cmake

   set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)

 那么\ ``-C``\ 参数将优先，\ ``CMAKE_BUILD_TYPE``\ 将被设置为\ ``Release``。但是，\
 如果\ ``-D``\ 参数出现在\ ``-C``\ 参数之后，它将被设置为\ ``Debug``。

 如果一个\ ``set(... CACHE ...)``\ 在\ ``-C``\ 文件中调用不使用\ ``FORCE``，并且\
 ``-D``\ 参数设置相同的变量，\ ``-D``\ 参数将优先考虑顺序，因为非\ ``FORCE``\ \
 ``set(... CACHE ...)``\ 的本质调用。

.. option:: -U <globbing_expr>

 从CMake ``CACHE``\ 中删除匹配的条目。

 这个选项可以用来从\ ``CMakeCache.txt``\ 文件中删除一个或多个变量，支持\ ``*``\ 和\ ``?``\
 通配符。对于多个有需要的\ ``CACHE``\ 条目，这个选项可以重复。

 请小心使用，它可以使你的\ ``CMakeCache.txt``\ 无效。

.. option:: -G <generator-name>

 指定构建系统生成器。

 CMake可能在某些平台上支持多个本机构建系统。生成器负责生成特定的构建系统。支持的生成器名称在\
 :manual:`cmake-generators(7)`\ 手册中指定。

 如果没有指定，CMake将检查\ :envvar:`CMAKE_GENERATOR`\ 环境变量，否则返回内置默认选择。

.. option:: -T <toolset-spec>

 生成器的工具集规范（如果支持）。

 一些CMake生成器支持一个工具集规范来告诉本地构建系统如何选择编译器。有关详细信息，请参阅\
 :variable:`CMAKE_GENERATOR_TOOLSET`\ 变量。

.. option:: -A <platform-name>

 如果生成器支持，请指定平台名称。

 一些CMake生成器支持通过本地构建系统一个平台名来选择编译器或SDK。详见\
 :variable:`CMAKE_GENERATOR_PLATFORM`\ 变量。

.. option:: --toolchain <path-to-file>

 .. versionadded:: 3.21

 指定交叉编译工具链文件，相当于设置\ :variable:`CMAKE_TOOLCHAIN_FILE`\ 变量。 Relative paths are interpreted as
 relative to the build directory, and if not found, relative to the source
 directory.

.. option:: --install-prefix <directory>

 .. versionadded:: 3.21

 指定安装目录，由\ :variable:`CMAKE_INSTALL_PREFIX`\ 变量使用。必须是绝对路径。

.. option:: -Wno-dev

 抑制开发者警告。

 关闭针对\ ``CMakeLists.txt``\ 文件作者的警告。默认情况下，这也将关闭弃用警告。

.. option:: -Wdev

 启用开发人员警告。

 启用针对\ ``CMakeLists.txt``\ 文件作者的警告。默认情况下，这也将打开弃用警告。

.. option:: -Wdeprecated

 启用弃用的功能警告。

 启用使用禁用功能时的警告，用于\ ``CMakeLists.txt``\ 文件的作者。

.. option:: -Wno-deprecated

 禁用已弃用的功能警告。

 关闭使用弃用功能时的警告，用于\ ``CMakeLists.txt``\ 文件的作者。

.. option:: -Werror=<what>

 将警告视为错误。\ ``<what>``\ 必须是下列之一：

 ``dev``
   使开发人员警告错误。

   对\ ``CMakeLists.txt``\ 文件的作者发出错误警告。默认情况下，这也会将已弃用的警告作为错\
   误打开。

 ``deprecated``
  使已弃用的宏和函数警告出错。

  对使用已弃用的宏和函数发出警告，这是针对\ ``CMakeLists.txt``\ 文件的作者的错误。

.. option:: -Wno-error=<what>

 不要将CMake警告视为错误。\ ``<what>``\ 必须是下列之一：

 ``dev``
  对\ ``CMakeLists.txt``\ 文件的作者发出警告，而不是错误。默认情况下，这也将关闭已弃用的\
  警告作为错误。

 ``deprecated``
  对已弃用的宏和函数的使用发出警告，这是针对\ ``CMakeLists.txt``\ 文件的作者的，而不是错误。
